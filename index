<!doctype html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Mentor Chef — Dashboard + IA</title>

  <!-- Tailwind -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Cytoscape (grafo) -->
  <script src="https://cdn.jsdelivr.net/npm/cytoscape@3.33.1/dist/cytoscape.min.js"></script>

  <style>
    html, body { height: 100%; background:#0b0f14; color:#e6eef7 }
    .card{ background:#111827; border:1px solid #1f2937; border-radius:14px }
    .pill{ border:1px solid #334155; border-radius:999px; padding:2px 10px }
    .btn{ background:#0ea5e9; color:#00131f; border-radius:12px; padding:10px 14px; font-weight:700 }
    .btn:hover{ filter:brightness(1.05) }
    .input{ background:#0b1220; border:1px solid #263142; border-radius:12px; padding:10px 12px; color:#e6eef7 }
    .input:focus{ outline:none; border-color:#38bdf8 }
    #graph{ width:100%; height:360px; background:#0a0f16; border:1px solid #1e293b; border-radius:14px }
    #chatLog{ background:#0a0f16 }
    a.link{ color:#7dd3fc; text-decoration:underline }
    .chip{ background:#0f172a; border:1px solid #1e293b; border-radius:10px; padding:2px 8px; font-size:12px }
  </style>
</head>
<body class="h-full">
  <div id="app" class="flex flex-col h-full">

    <!-- Topbar -->
    <header class="w-full border-b border-slate-800/80">
      <div class="max-w-7xl mx-auto px-4 py-3 flex items-center gap-3">
        <!-- Troque a imagem pelo seu avatar de Chef -->
        <img id="chefAvatarTop" src="https://images.unsplash.com/photo-1551218372-5d2a3531b4d8?w=96&q=80" alt="Chef-Mentor" class="w-8 h-8 rounded-full object-cover" />
        <div class="text-lg sm:text-xl font-black">Mentor Chef</div>
        <div class="pill text-xs">Dashboard + IA</div>
        <div id="projectPill" class="pill text-xs">Projeto: <b>SPAC</b></div>
        <div class="ml-auto flex items-center gap-2">
          <span id="langChip" class="pill text-xs">pt-BR</span>
          <span id="userChip" class="pill text-xs">Visitante</span>
          <span id="apiStatus" class="pill text-xs">IA: offline</span>
        </div>
      </div>
    </header>

    <!-- Conteúdo -->
    <main class="flex-1 max-w-7xl mx-auto px-4 py-4">
      <!-- Onboarding: Boas-vindas -->
      <div id="view-welcome" class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="card p-6 flex items-center gap-4">
          <img id="chefAvatarWelcome" src="https://images.unsplash.com/photo-1551218372-5d2a3531b4d8?w=240&q=80" alt="Chef-Mentor" class="w-28 h-28 rounded-full object-cover">
          <div>
            <div class="text-xl font-bold" data-i18n="welcomeHeadline">Bem-vindo ao Mentor Chef — sua inteligência estratégica para bares e restaurantes.</div>
            <p class="text-sm opacity-75 mt-2">Chef-Mentor • 3 Camadas: Reflexiva • Executiva • Didática</p>
            <button class="btn mt-4" onclick="go('/onboarding/language')" data-i18n="start">Começar</button>
          </div>
        </div>
        <div class="card p-6">
          <div class="text-sm opacity-80 mb-2">Dica</div>
          <p class="text-sm opacity-90">Esta é uma SPA estática. Para IA online, configure <code>API_URL</code> (já apontando para <code>/api/mentor</code>) e defina a variável <code>OPENAI_API_KEY</code> no projeto, se quiser LLM real.</p>
        </div>
      </div>

      <!-- Onboarding: Idioma -->
      <div id="view-language" class="hidden card p-6">
        <div class="text-lg font-semibold mb-3" data-i18n="chooseLanguage">Escolha seu idioma</div>
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-3">
          <button class="btn" onclick="setLocale('pt-BR')">🇧🇷 Português (Brasil)</button>
          <button class="btn" onclick="setLocale('en')">🇬🇧 English</button>
          <button class="btn" onclick="setLocale('es')">🇪🇸 Español</button>
        </div>
        <button class="btn mt-4" onclick="go('/onboarding/login')" data-i18n="continue">Continuar</button>
      </div>

      <!-- Onboarding: Login -->
      <div id="view-login" class="hidden card p-6">
        <div class="text-lg font-semibold mb-4" data-i18n="createProfile">Crie seu perfil</div>
        <div class="grid sm:grid-cols-2 gap-3">
          <input id="nameInput" class="input" placeholder="Nome" />
          <input id="emailInput" class="input" placeholder="E-mail" />
          <select id="roleInput" class="input">
            <option value="editor">editor</option>
            <option value="viewer">viewer</option>
            <option value="admin">admin</option>
            <option value="owner">owner</option>
          </select>
          <select id="localeInput" class="input">
            <option value="pt-BR">pt-BR</option>
            <option value="en">en</option>
            <option value="es">es</option>
          </select>
        </div>
        <div class="mt-3 flex items-center gap-3">
          <button class="btn" onclick="handleLogin()" data-i18n="login">Entrar</button>
          <button class="pill" onclick="continueAsGuest()" data-i18n="guest">Acesso como visitante (somente leitura)</button>
        </div>
      </div>

      <!-- Onboarding: Mensagem do Chef -->
      <div id="view-hello" class="hidden card p-6">
        <div class="flex items-center gap-4">
          <img src="https://images.unsplash.com/photo-1551218372-5d2a3531b4d8?w=120&q=80" class="w-20 h-20 rounded-full object-cover" alt="Chef-Mentor">
          <div>
            <div class="text-lg font-semibold" data-i18n="chefHelloTitle">Mensagem do Chef-Mentor</div>
            <p id="helloBody" class="text-sm opacity-90 mt-1"></p>
            <button class="btn mt-3" onclick="go('/dashboard')" data-i18n="goDashboard">Ir para o Dashboard</button>
          </div>
        </div>
      </div>

      <!-- Dashboard -->
      <div id="view-dashboard" class="hidden grid grid-cols-12 gap-4">
        <!-- Sidebar -->
        <aside class="col-span-12 lg:col-span-3 space-y-4">
          <div class="card p-4">
            <div class="text-sm font-semibold mb-2">Visões</div>
            <div class="flex flex-col gap-2">
              <button class="btn" onclick="setView('chat')">Chat</button>
              <button class="btn" onclick="setView('decisions')">Decisões</button>
              <button class="btn" onclick="setView('projects')">Projetos (SPAC)</button>
              <button class="btn" onclick="setView('timeline')">Timeline</button>
            </div>
          </div>
          <div class="card p-4">
            <div class="text-sm font-semibold mb-2">Comandos</div>
            <div class="grid grid-cols-2 gap-2 text-sm">
              <button class="pill" onclick="insertCmd('/decidir ')">/decidir</button>
              <button class="pill" onclick="insertCmd('/lembrar ')">/lembrar</button>
              <button class="pill" onclick="insertCmd('/mapa')">/mapa</button>
              <button class="pill" onclick="insertCmd('/seguir ')">/seguir</button>
              <button class="pill" onclick="insertCmd('/language ')">/language</button>
            </div>
          </div>
          <div class="card p-4">
            <div class="text-sm font-semibold mb-2">Status</div>
            <div class="text-xs opacity-80">Usuário: <span id="statusUser">Visitante</span></div>
            <div class="text-xs opacity-80">Idioma: <span id="statusLang">pt-BR</span></div>
            <div class="text-xs opacity-80">IA: <span id="statusApi">offline</span></div>
          </div>
        </aside>

        <!-- Área principal -->
        <section class="col-span-12 lg:col-span-9 space-y-4">
          <!-- CHAT -->
          <div id="pane-chat" class="card p-4">
            <div class="flex items-center justify-between">
              <div>
                <div class="font-semibold">Chat do Mentor Chef</div>
                <div class="text-xs opacity-70">3 camadas: Reflexiva • Executiva • Didática</div>
              </div>
              <div class="text-xs opacity-70">Histórico salvo localmente</div>
            </div>
            <div id="chatLog" class="mt-3 h-72 overflow-y-auto rounded-lg p-3 text-sm"></div>
            <form id="chatForm" class="mt-3 flex gap-2" onsubmit="sendMessage(event)">
              <input id="chatInput" class="input flex-1" placeholder="Escreva aqui... (/decidir, /lembrar, /mapa, /seguir, /language)" />
              <button class="btn" type="submit">Enviar</button>
            </form>
          </div>

          <!-- DECISÕES -->
          <div id="pane-decisions" class="card p-4 hidden">
            <div class="flex items-center justify-between">
              <div class="font-semibold">Visão Decisões — SPAC</div>
              <div class="text-xs opacity-70">Cores: aprovado/pendente/rejeitado • Arestas = dependências</div>
            </div>
            <div id="graph" class="mt-3"></div>
            <div class="mt-4">
              <div class="font-semibold mb-2">Decisões registradas</div>
              <table class="w-full text-sm">
                <thead class="opacity-70">
                  <tr class="text-left">
                    <th class="py-2">Título</th><th>Contexto</th><th>Opções</th><th>Riscos</th><th>Status</th><th>Data</th>
                  </tr>
                </thead>
                <tbody id="decisionsTable"></tbody>
              </table>
            </div>
          </div>

          <!-- PROJETOS -->
          <div id="pane-projects" class="card p-4 hidden">
            <div class="font-semibold">Visão Projetos — SPAC (cluster)</div>
            <div class="mt-2 grid sm:grid-cols-2 gap-3 text-sm">
              <div class="card p-3">
                <div class="font-semibold">Infraestrutura</div>
                <ul class="list-disc ml-5 mt-1 opacity-90">
                  <li>Reforma da Cozinha</li>
                  <li>Equipamentos: ultracongelador, torre de chope…</li>
                </ul>
              </div>
              <div class="card p-3">
                <div class="font-semibold">Cardápios</div>
                <ul class="list-disc ml-5 mt-1 opacity-90">
                  <li>Cozinha de apoio</li>
                  <li>Eventos (Dia dos Pais, harmonizações)</li>
                </ul>
              </div>
              <div class="card p-3">
                <div class="font-semibold">Operações</div>
                <ul class="list-disc ml-5 mt-1 opacity-90">
                  <li>POPs • Fluxo buffet • Escala de colaboradores</li>
                </ul>
              </div>
              <div class="card p-3">
                <div class="font-semibold">Finanças</div>
                <ul class="list-disc ml-5 mt-1 opacity-90">
                  <li>DRE (gerencial) • CMV • Precificação</li>
                </ul>
              </div>
              <div class="card p-3">
                <div class="font-semibold">Delivery</div>
                <ul class="list-disc ml-5 mt-1 opacity-90">
                  <li>Viabilidade legal (CNAEs) • iFood</li>
                </ul>
              </div>
            </div>
          </div>

          <!-- TIMELINE -->
          <div id="pane-timeline" class="card p-4 hidden">
            <div class="flex items-center justify-between">
              <div class="font-semibold">Timeline — SPAC</div>
              <div class="text-xs opacity-70">Filtra eventos por data</div>
            </div>
            <div class="mt-3 flex items-center gap-3">
              <input id="timelineRange" type="date" class="input" value="2025-09-16" min="2024-08-01" max="2025-12-31" oninput="updateTimeline(this.value)" />
              <span id="timelineLabel" class="pill">16/09/2025</span>
            </div>
            <div id="timelineList" class="mt-3 text-sm"></div>
          </div>
        </section>
      </div>
    </main>

    <footer class="border-t border-slate-800/80">
      <div class="max-w-7xl mx-auto px-4 py-3 text-xs opacity-70">
        Mentor Chef • SPA demonstrativa (memória local). Endpoint: <code>/api/mentor</code>.
      </div>
    </footer>
  </div>

  <script>
    /************* CONFIG *************/
    // Já configurado para chamar sua API na Vercel
    const API_URL = '/api/mentor';

    /************* I18N *************/
    const i18n = {
      'pt-BR': {
        appTitle:'Mentor Chef',
        start:'Começar', chooseLanguage:'Escolha seu idioma',
        welcomeHeadline:'Bem-vindo ao Mentor Chef — sua inteligência estratégica para bares e restaurantes.',
        continue:'Continuar', createProfile:'Crie seu perfil',
        name:'Nome', email:'E-mail', role:'Papel', login:'Entrar',
        guest:'Acesso como visitante (somente leitura)',
        chefHelloTitle:'Mensagem do Chef-Mentor',
        chefHelloBody:'Olá, sou o seu Mentor Chef. Posso ajudar a gerir sua cozinha, bar ou restaurante com clareza e estratégia. Respondo em 3 camadas: Reflexiva • Executiva • Didática. Experimente: /decidir Reforma da Cozinha | contexto | opções | riscos ou /lembrar Ajustar precificação do cardápio de drinks.',
        goDashboard:'Ir para o Dashboard'
      },
      'en': {
        appTitle:'Mentor Chef',
        start:'Start', chooseLanguage:'Choose your language',
        welcomeHeadline:'Welcome to Mentor Chef — your strategic intelligence for bars and restaurants.',
        continue:'Continue', createProfile:'Create your profile',
        name:'Name', email:'Email', role:'Role', login:'Sign in',
        guest:'Continue as guest (read-only)',
        chefHelloTitle:'Chef-Mentor Message',
        chefHelloBody:'Hello, I’m your Mentor Chef. I help you manage your kitchen, bar, or restaurant with clarity and strategy. I answer in 3 layers: Reflective • Executive • Didactic. Try: /decidir Kitchen Renovation | context | options | risks or /lembrar Adjust drink menu pricing.',
        goDashboard:'Go to Dashboard'
      },
      'es': {
        appTitle:'Mentor Chef',
        start:'Empezar', chooseLanguage:'Elige tu idioma',
        welcomeHeadline:'Bienvenido a Mentor Chef — tu inteligencia estratégica para bares y restaurantes.',
        continue:'Continuar', createProfile:'Crea tu perfil',
        name:'Nombre', email:'Correo', role:'Rol', login:'Entrar',
        guest:'Acceso como invitado (solo lectura)',
        chefHelloTitle:'Mensaje del Chef-Mentor',
        chefHelloBody:'Hola, soy tu Mentor Chef. Te ayudo a gestionar tu cocina, bar o restaurante con claridad y estrategia. Respondo en 3 capas: Reflexiva • Ejecutiva • Didáctica. Prueba: /decidir Reforma de la Cocina | contexto | opciones | riesgos o /lembrar Ajustar precios del menú de cócteles.',
        goDashboard:'Ir al Panel'
      }
    };

    /************* ESTADO *************/
    const LS = { user:'mentorchef.user', chat:'mentorchef.chat', decisions:'mentorchef.decisions', state:'mentorchef.state' };
    let currentUser = JSON.parse(localStorage.getItem(LS.user) || 'null');
    let appState = JSON.parse(localStorage.getItem(LS.state) || '{"projectActive":"SPAC","locale":"pt-BR"}');
    let chat = JSON.parse(localStorage.getItem(LS.chat) || '[]');
    let decisions = JSON.parse(localStorage.getItem(LS.decisions) || '[]');
    function saveAll(){ localStorage.setItem(LS.user, JSON.stringify(currentUser)); localStorage.setItem(LS.state, JSON.stringify(appState)); localStorage.setItem(LS.chat, JSON.stringify(chat)); localStorage.setItem(LS.decisions, JSON.stringify(decisions)); }

    function t(key){ const dict = i18n[appState.locale] || i18n['pt-BR']; return dict[key] || key; }
    function applyI18n(){
      document.querySelectorAll('[data-i18n]').forEach(el=>{ const k=el.getAttribute('data-i18n'); el.textContent = t(k); });
      document.getElementById('langChip').textContent = appState.locale;
      document.getElementById('statusLang').textContent = appState.locale;
      document.title = t('appTitle') + ' — Dashboard + IA';
      const hb = document.getElementById('helloBody'); if(hb) hb.textContent = t('chefHelloBody');
    }

    /************* ROTEADOR *************/
    function hideAll(){ ['view-welcome','view-language','view-login','view-hello','view-dashboard'].forEach(id=>document.getElementById(id).classList.add('hidden')); }
    function go(path){
      if(path==='/onboarding/language'){ hideAll(); document.getElementById('view-language').classList.remove('hidden'); return; }
      if(path==='/onboarding/login'){ hideAll(); document.getElementById('view-login').classList.remove('hidden'); document.getElementById('localeInput').value = appState.locale; return; }
      if(path==='/onboarding/hello'){ hideAll(); document.getElementById('view-hello').classList.remove('hidden'); return; }
      if(path==='/dashboard'){ hideAll(); document.getElementById('view-dashboard').classList.remove('hidden'); renderAllDashboard(); return; }
      hideAll(); document.getElementById('view-welcome').classList.remove('hidden');
    }

    /************* LOGIN *************/
    function setLocale(locale){
      appState.locale = locale;
      if(currentUser){
        currentUser.locale = locale;
        if(locale==='pt-BR'){ currentUser.currency='BRL'; currentUser.dateFormat='DD/MM/YYYY'; }
        if(locale==='en'){ currentUser.currency='USD'; currentUser.dateFormat='MM/DD/YYYY'; }
        if(locale==='es'){ currentUser.currency='EUR'; currentUser.dateFormat='DD/MM/YYYY'; }
      }
      saveAll(); applyI18n();
    }
    function handleLogin(){
      const name = document.getElementById('nameInput').value.trim();
      const email = document.getElementById('emailInput').value.trim();
      const role = document.getElementById('roleInput').value;
      const locale = document.getElementById('localeInput').value;
      if(!name || !email){ alert('Preencha nome e e-mail'); return; }
      currentUser = { name, email, role, locale, currency: locale==='pt-BR'?'BRL':(locale==='en'?'USD':'EUR'), dateFormat: locale==='en'?'MM/DD/YYYY':'DD/MM/YYYY', createdAt: new Date().toISOString() };
      appState.locale = locale; saveAll(); applyI18n();
      document.getElementById('userChip').textContent = name; document.getElementById('statusUser').textContent = name;
      go('/onboarding/hello');
    }
    function continueAsGuest(){ currentUser = null; saveAll(); applyI18n(); document.getElementById('userChip').textContent = 'Visitante'; document.getElementById('statusUser').textContent = 'Visitante'; go('/onboarding/hello'); }

    /************* DASHBOARD *************/
    function setView(v){
      ['pane-chat','pane-decisions','pane-projects','pane-timeline'].forEach(id=>document.getElementById(id).classList.add('hidden'));
      document.getElementById(`pane-${v}`).classList.remove('hidden');
      if(v==='decisions'){ renderGraph(); renderDecisionsTable(); }
      if(v==='timeline'){ renderTimeline(); }
      if(v==='chat'){ renderChat(); }
    }
    function renderAllDashboard(){
      document.getElementById('userChip').textContent = currentUser ? currentUser.name : 'Visitante';
      document.getElementById('statusUser').textContent = currentUser ? currentUser.name : 'Visitante';
      document.getElementById('statusApi').textContent = API_URL ? 'online' : 'offline';
      document.getElementById('apiStatus').textContent = API_URL ? 'IA: online' : 'IA: offline';
      applyI18n();
      if(decisions.length===0){
        decisions = [
          { id:'D1', titulo:'Reforma da Cozinha', contexto:'Infra — SPAC', opcoes:'Empreiteira A/B', riscos:'Atraso', status:'aprovado', depende:'', ts: Date.parse('2024-09-10') },
          { id:'D2', titulo:'Cardápio Cozinha de Apoio', contexto:'Operação em reforma', opcoes:'Menu reduzido', riscos:'Satisfação sócios', status:'pendente', depende:'Reforma da Cozinha', ts: Date.parse('2024-09-12') },
          { id:'D3', titulo:'Evento Dia dos Pais', contexto:'Agosto/2025', opcoes:'Menu britânico', riscos:'Custo', status:'aprovado', depende:'Cardápio Cozinha de Apoio', ts: Date.parse('2025-08-05') }
        ];
        saveAll();
      }
      setView('chat'); renderGraph(); renderDecisionsTable(); renderChat(); renderTimeline();
    }

    /************* CHAT *************/
    function renderChat(){
      const log = document.getElementById('chatLog'); log.innerHTML = '';
      chat.forEach(m=>{
        const wrap = document.createElement('div'); wrap.className='mb-3';
        wrap.innerHTML = `<div class="text-xs opacity-60">${new Date(m.ts).toLocaleString()}</div>
          <div class="mt-1 p-3 rounded-lg ${m.role==='user'?'bg-slate-800':'bg-sky-900/20 border border-sky-800'}">
          <div class="text-xs opacity-80 mb-1">${m.role==='user'?(currentUser?currentUser.name:'Você'):'Mentor Chef'}</div>
          <div class="whitespace-pre-wrap">${m.text}</div></div>`;
        log.appendChild(wrap);
      }); log.scrollTop = log.scrollHeight;
    }

    async function sendMessage(e){
      e.preventDefault();
      const input = document.getElementById('chatInput');
      const text = (input.value||'').trim(); if(!text) return;
      chat.push({ role:'user', text, ts:Date.now() }); saveAll(); input.value=''; renderChat();

      // Comandos
      if(text.startsWith('/language')){ const lang = text.split(' ')[1]; if(lang) setLocale(lang.trim()); chat.push({role:'assistant',ts:Date.now(),text:`Idioma alterado para ${appState.locale}.`}); saveAll(); return renderChat(); }
      if(text.startsWith('/decidir')) return handleDecidir(text);
      if(text.startsWith('/lembrar')) return handleLembrar(text);
      if(text.startsWith('/mapa')){ setView('decisions'); return; }
      if(text.startsWith('/seguir')) return handleSeguir(text);

      // IA (serverless) + fallback
      const reply = await mentorReply(text, chat);
      chat.push({ role:'assistant', text: reply, ts: Date.now() }); saveAll(); renderChat();
    }

    async function mentorReply(text, history){
      const apiStatus = document.getElementById('apiStatus');
      const payload = { system: buildSystemPrompt(), user: text, history: history.slice(-10) };
      try {
        if (API_URL) {
          apiStatus.textContent = 'IA: online';
          const r = await fetch(API_URL, { method:'POST', headers: { 'Content-Type':'application/json' }, body: JSON.stringify(payload) });
          const data = await r.json();
          if (data?.text) return data.text;
        } else {
          apiStatus.textContent = 'IA: offline';
        }
      } catch(e){ apiStatus.textContent = 'IA: erro'; }

      // Fallback gastronômico
      const q = text.toLowerCase(); const ing = [];
      if(q.includes('banana')) ing.push('banana');
      if(q.includes('lombo') || q.includes('porco')) ing.push('lombo de porco');
      if(ing.length){
        return [
          `🔹 **Reflexiva** — “Equilíbrio é a alma do prato: doce da banana, gordura do porco, acidez para limpar o palato.”`,
          `🔹 **Executiva** — *Lombo laqueado com banana caramelizada, pimenta e limão*:\n• Sele o lombo; deglace com suco de laranja; glace com mel/rapadura.\n• Banana: manteiga + mascavo + sal; finalize com raspas de limão.\n• Equilíbrio: acidez (limão/maçã), picância (dedo-de-moça), ervas.\n• Acompanhamento: purê de mandioca ou arroz de castanhas.\n• CMV: padronize 160 g/porção; banana madura; controle perdas no mise en place.`,
          `🔹 **Didática** — Contraste doce-gordo-ácido-picante. O laqueado traz brilho/umami; farofa crocante eleva valor percebido sem estourar custo.`
        ].join('\n');
      }

      const refs = findReferences(text);
      const refText = refs.length ? `\n\nJá falamos sobre: ${refs.map(r=>`“${r}”`).join(', ')}.` : '';
      return [
        `🔹 **Reflexiva** — “Estratégia é dizer não com propósito. Qual prato sai do menu para que o novo brilhe?”`,
        `🔹 **Executiva** — 1) Defina objetivo e métrica.\n2) Liste 2–3 opções e riscos.\n3) Faça pré-mortem breve.\n4) Registre com /decidir (prazo, responsável).`,
        `🔹 **Didática** — Clareza, exploração, proteção e compromisso reduzem incerteza.${refText}`
      ].join('\n');
    }

    function buildSystemPrompt(){
      return `Você é o Mentor Chef (multi-idioma). Responda SEMPRE em 3 camadas: Reflexiva, Executiva, Didática. Domínios: liderança, estratégia, governança/finanças, gastronomia & inovação. Contexto prioritário: bares e restaurantes (SPAC como exemplo). Suporte comandos: /language, /decidir, /lembrar, /mapa, /seguir. Faça referências a conversas passadas quando pertinente. RESPONDA à pergunta concreta do usuário, com exemplos aplicáveis.`;
    }

    function findReferences(text){
      const q = text.toLowerCase().split(/\W+/).filter(w=>w.length>3);
      if (!q.length) return [];
      const score = new Map();
      chat.forEach(m=>{
        const t = (m.text||'').toLowerCase(); let hits=0;
        for(const w of q){ if(t.includes(w)) hits++; }
        if(hits>=2){ const key=(m.text||'').slice(0,60); score.set(key,(score.get(key)||0)+hits); }
      });
      return Array.from(score.entries()).sort((a,b)=>b[1]-a[1]).map(([k])=>k).slice(0,3);
    }

    /************* COMANDOS *************/
    function insertCmd(cmd){ const i=document.getElementById('chatInput'); i.value=(i.value||'')+cmd; i.focus(); }
    function handleDecidir(text){
      // /decidir Título | Contexto | Opções | Riscos | status=pendente|aprovado|rejeitado | depende=Outro Título | projeto=SPAC
      const raw = text.replace('/decidir','').trim();
      const [titulo, contexto, opcoes, riscos, statusKv, dependeKv, projetoKv] = raw.split('|').map(s=>(s||'').trim());
      const status = (statusKv||'').split('=').pop() || 'pendente';
      const depende = (dependeKv||'').split('=').pop() || '';
      const projeto = (projetoKv||'').split('=').pop() || (appState.projectActive||'SPAC');
      const dec = { id:'D'+Date.now(), titulo: titulo||'Decisão sem título', contexto: contexto||'', opcoes: opcoes||'', riscos: riscos||'', status, depende, projeto, ts: Date.now() };
      decisions.push(dec); saveAll();
      chat.push({ role:'assistant', ts:Date.now(), text:`Decisão registrada: **${dec.titulo}** (status: ${dec.status}, projeto: ${dec.projeto}).` });
      renderDecisionsTable(); renderGraph(); renderChat();
    }
    function handleLembrar(text){ const memo = text.replace('/lembrar','').trim(); chat.push({ role:'assistant', ts:Date.now(), text:`Aprendizado salvo: ${memo}`}); saveAll(); renderChat(); }
    function handleSeguir(text){ const tema = text.replace('/seguir','').trim(); chat.push({ role:'assistant', ts:Date.now(), text:`Ok — vou acompanhar "${tema}" e avisar quando houver novas conexões.`}); saveAll(); renderChat(); }

    /************* GRAFO *************/
    let cy;
    function renderGraph(){
      const container = document.getElementById('graph'); const nodes=[], edges=[]; const idByTitle={}; decisions.forEach(d=> idByTitle[d.titulo]=d.id);
      decisions.forEach(d=>{
        const color = d.status==='aprovado' ? '#34d399' : (d.status==='rejeitado' ? '#f87171' : '#fbbf24');
        nodes.push({ data:{ id:d.id, label:d.titulo, color }});
        if(d.depende){ const parent=idByTitle[d.depende]; if(parent){ edges.push({ data:{ source:d.id, target:parent, label:'depende de' }}); } }
      });
      if(!cy){
        cy = cytoscape({ container, elements:{ nodes, edges }, style:[
          { selector:'node', style:{ 'background-color':'data(color)','label':'data(label)','color':'#02131e','font-weight':'700','text-wrap':'wrap','text-max-width':180,'text-valign':'center','text-halign':'center','border-width':2,'border-color':'#0b1220' }},
          { selector:'edge', style:{ 'width':2,'line-color':'#475569','target-arrow-color':'#475569','target-arrow-shape':'triangle','curve-style':'bezier','label':'data(label)','font-size':10,'color':'#9fbad1','text-background-color':'#0a0f16','text-background-opacity':0.8,'text-background-padding':2 }}
        ], layout:{ name:'cose', animate:false }});
      } else { cy.elements().remove(); cy.add(nodes); cy.add(edges); cy.layout({ name:'cose', animate:false }).run(); }
    }
    function renderDecisionsTable(){
      const tbody=document.getElementById('decisionsTable'); tbody.innerHTML='';
      decisions.slice().sort((a,b)=>b.ts-a.ts).forEach(d=>{
        const tr=document.createElement('tr');
        tr.innerHTML = `<td class="py-2 pr-2">${d.titulo}</td><td class="pr-2">${d.contexto}</td><td class="pr-2">${d.opcoes}</td><td class="pr-2">${d.riscos}</td><td class="pr-2"><span class="chip">${d.status}</span></td><td class="pr-2">${new Date(d.ts).toLocaleDateString()}</td>`;
        tbody.appendChild(tr);
      });
    }

    /************* TIMELINE *************/
    function renderTimeline(){ updateTimeline(document.getElementById('timelineRange').value); }
    function updateTimeline(dateStr){
      const lbl=document.getElementById('timelineLabel'); if(lbl){ try{ lbl.textContent=new Date(dateStr).toLocaleDateString(); }catch{} }
      const cutoff=new Date(dateStr).getTime(); const list=document.getElementById('timelineList'); list.innerHTML='';
      const items=[
        ...decisions.map(d=>({ ts:d.ts, type:'dec', text:`Decisão: <b>${d.titulo}</b> (status ${d.status})` })),
        ...chat.filter(m=>m.role==='assistant').map(m=>({ ts:m.ts, type:'insight', text:`Insight: ${m.text.slice(0,120)}…` }))
      ].filter(x=>x.ts<=cutoff).sort((a,b)=>b.ts-a.ts).slice(0,30);
      items.forEach(it=>{
        const div=document.createElement('div'); div.className='mb-2 p-3 rounded-lg bg-slate-900/40 border border-slate-800';
        div.innerHTML=`<div class="text-xs opacity-60">${new Date(it.ts).toLocaleString()}</div><div class="mt-1">${it.text}</div>`;
        list.appendChild(div);
      });
    }

    /************* BOOT *************/
    (function boot(){
      if(!appState.locale) appState.locale='pt-BR';
      applyI18n();
      document.getElementById('statusApi').textContent = API_URL ? 'online' : 'offline';
      document.getElementById('apiStatus').textContent = API_URL ? 'IA: online' : 'IA: offline';
      document.getElementById('statusUser').textContent = currentUser ? currentUser.name : 'Visitante';
      document.getElementById('userChip').textContent = currentUser ? currentUser.name : 'Visitante';
      document.getElementById('langChip').textContent = appState.locale;

      // Rota inicial
      if(!localStorage.getItem(LS.user) && chat.length===0 && decisions.length===0){
        go('/'); // welcome
      } else {
        go('/dashboard');
      }
    })();
  </script>
</body>
</html>
